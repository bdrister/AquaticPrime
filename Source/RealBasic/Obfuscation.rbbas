#tag ModuleProtected Module Obfuscation	#tag Method, Flags = &h21		Private Function CreateObfuscatedKeyArray(pk As String) As String()		  dim outArr() As String		  		  if pk.Trim = "" Then		    Return outArr		  end if		  		  if rand is nil Then		    rand = new Random		    dim d As new Date		    rand.Seed = d.TotalSeconds		  end if		  		  dim s As String		  dim ln As Integer		  dim keyArr() As String		  dim cnt As Integer		  dim enc As Integer = rand.InRange(1, 4)		  		  // start off with at least 4 key members		  do		    cnt = rand.InRange(1, 8)		    if cnt >= 4 Then		      s = Left(pk, cnt)		      ln = cnt		    end if		  Loop until s <> ""		  		  keyArr.Append s		  		  do		    cnt = rand.InRange(1, 8)		    s = Mid(pk, ln + 1, cnt)		    ln = cnt + ln		    		    if cnt > 1 and enc <= cnt - 1 Then		      dim t As String = left(s, enc - 1)		      t = t + """ + chr("		      t = t + str(asc(mid(s, enc, 1))) + ") + """		      t = t + Mid(s, enc + 1)		      enc = rand.InRange(2, 5)		      s = t		    end if		    		    keyArr.Append s		    		  loop until ln >= len(pk)		  		  for i As Integer = 0 to keyArr.Ubound		    outArr.Append "publicKey = publicKey + """ + keyArr(i) + """"		  next		  		  Return outArr		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub CreateObscurePubKeyCode(key As String, pieces As Integer)		  // initialize		  ReDim MethodsArr(-1)		  		  // this method accepts a public key that whose generation you want to divvy up into separate methods in your		  // application, and the number of piece of code you want to handle this action		  		  if pieces > 8 Then		    // anything more gets a little ridiculous		    pieces = 8		  end if		  		  if pieces < 1 Then		    // somebody messed up, so just assume the minimum obfuscation		    pieces = 1		  end if		  		  if pieces = 1 Then		    // redo the basic obfuscation for saving to the file		    MethodsArr.Append kPrivateFunctionStart + "GetKeySection1() As String" + EndOfLine _		    + GetKey(key) + EndOfLine _		    + "Return publicKey" + EndOfLine + kMethodEnd		    		  Else		    // break the code up into the minimum or greater number of methods specified		    // first generate the code to create an array representing the key in a semi-obfuscated manner		    dim pk() As String = CreateObfuscatedKeyArray(key)		    		    dim u As Integer = UBound(pk)		    dim avg As Integer = u/pieces		    dim cnt As Integer		    dim methNum As Integer = 1		    		    While cnt < UBound(pk)		      u = rand.InRange(max(1, avg - 3), avg + 2)		      dim mArr() As String		      for j As Integer = 1 to u		        if cnt <= pk.Ubound Then		          mArr.Append pk(cnt)		        end if		        cnt = cnt + 1		      next		      // make a new method		      dim code As String = MakeItemFunctionString(mArr, methNum)		      methNum = methNum + 1		      		      // add it to array for saving in module file		      MethodsArr.Append code		    Wend		    		    if cnt < UBound(pk) Then		      // this should not ever happen		      // if it does, we'll need to add the remnants to the array before writing the file		      Break		    end if		  end if		  		  WriteModuleFile		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GetKey(pk As String) As String		  dim arr() As String = CreateObfuscatedKeyArray(pk)		  		  if arr.Ubound < 0 Then Return ""		  		  Return "dim publicKey As String" + EndOfLine + Join(arr, EndOfLine)		  		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function MakeItemFunctionString(arr() As String, num As Integer) As String		  		  dim s As String = kPrivateFunctionStart + "GetKeySection" + str(num) + "() As String" + EndOfLine		  s = s + "dim publicKey As String" + EndOfLine		  for i As Integer = 0 to arr.Ubound		    s = s + kMethodIndent + arr(i) + EndOfLine		  next		  		  s = s + kMethodIndent + "Return publicKey" + EndOfLine		  		  Return s + kMethodEnd + EndOfLine + EndOfLine		  		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub WriteModuleFile()		  		  dim save As new SaveAsDialog		  save.PromptText = "Save module file as..."		  save.Title = "Save Module File"		  save.SuggestedFileName = "PublicKeyModule.rbbas"		  		  dim f As FolderItem = save.ShowModal		  if f is nil Then Return		  		  dim s As String = kModuleStart + "PublicKeyModule" + EndOfLine		  		  s = s + kPrivateFunctionStart.Replace("Private", "Public") _		  + "GetPublicKey() As String" + EndOfLine		  		  s = s + kMethodIndent + "dim publicKey As String = "		  		  for i As Integer = 0 to MethodsArr.Ubound		    s = s + "GetKeySection" + str(i + 1)		    if i < MethodsArr.Ubound Then s = s + " _ " + EndOfLine + "+ "		  next		  		  s = s + EndOfLine + EndOfLine + kMethodIndent + "Return publicKey"		  		  s = s + EndOfLine + kMethodEnd + EndOfLine + EndOfLine		  		  		  dim ts As TextOutputStream = TextOutputStream.Create(f)		  if ts is nil Then		    Beep		    MsgBox "Can't create file."		    Return		  end if		  		  ts.Write s		  		  for i As Integer = 0 to MethodsArr.Ubound		    ts.Write MethodsArr(i)		  next		  		  ts.Write kModuleEnd		  		End Sub	#tag EndMethod	#tag Property, Flags = &h21		Private MethodsArr() As String	#tag EndProperty	#tag Property, Flags = &h21		Private rand As Random	#tag EndProperty	#tag Constant, Name = kMethodEnd, Type = String, Dynamic = False, Default = \"\t\tEnd Function\r\t#tag EndMethod\r", Scope = Private	#tag EndConstant	#tag Constant, Name = kMethodIndent, Type = String, Dynamic = False, Default = \"\t\t  ", Scope = Private	#tag EndConstant	#tag Constant, Name = kModuleEnd, Type = String, Dynamic = False, Default = \"End Module\r#tag EndModule", Scope = Private	#tag EndConstant	#tag Constant, Name = kModuleStart, Type = String, Dynamic = False, Default = \"#tag Module\rProtected Module \r", Scope = Private	#tag EndConstant	#tag Constant, Name = kPrivateFunctionStart, Type = String, Dynamic = False, Default = \"\t#tag Method\x2C Flags \x3D &h21\r\t\tPrivate Function ", Scope = Private	#tag EndConstant	#tag Constant, Name = kPublicFunctionOpen, Type = String, Dynamic = False, Default = \"\t#tag Method\x2C Flags \x3D &h0\r\t\tFunction ", Scope = Private	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule