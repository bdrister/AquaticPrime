#tag ClassClass CFDateInherits CFTypeImplements CFPropertyList	#tag Event		Function ClassID() As UInt32		  return me.ClassID		End Function	#tag EndEvent	#tag Event		Function VariantValue() As Variant		  return me.Operator_Convert		End Function	#tag EndEvent	#tag Method, Flags = &h0		Function AbsoluteTime() As Double		  #if TargetMacOS		    declare function CFDateGetAbsoluteTime lib CoreFoundation.framework (theDate as Ptr) as Double		    		    return CFDateGetAbsoluteTime(me.Reference)		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function ClassID() As UInt32		  #if TargetMacOS		    declare function TypeID lib CoreFoundation.framework alias "CFDateGetTypeID" () as UInt32		    static id as UInt32 = TypeID		    return id		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  // current time - including fractional seconds		  		  me.Constructor CurrentAbsoluteTime()		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(d as Date)		  if d is nil then		    // attention: this will not give fractional seconds; use the default constructor for that		    d = new Date		  end if		  		  dim ofs as Double = d.GMTOffset		  d.GMTOffset = 0		  me.Constructor d.TotalSeconds - AbsoluteTimeIntervalSince1904		  d.GMTOffset = ofs		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(absTime as Double)		  #if TargetMacOS		    declare function CFDateCreate lib CoreFoundation.framework (allocator as Ptr, at as Double) as Ptr		    		    super.Constructor CFDateCreate(nil, absTime), true		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function CurrentAbsoluteTime() As Double		  // Current date & time - including fractional seconds (versus the Date class which only		  //   returns full seconds)		  //		  // Note: Do not use this time to measure time differences, but only to get the current time,		  //   e.g. for showing the time to the use.		  // This is because this Time may be running a little faster or slower than "real" time, in		  //   order to adjust itself to fluctuations in network time. Think of this time trying to gradually		  //   catch up with an outside time.		  // Also, this time value may abruptly change if the user changes the Date & Time manually.		  //		  // To measure actual passed time accurately, use "Microseconds()" instead!		  		  #if TargetMacOS		    declare function CFAbsoluteTimeGetCurrent lib CoreFoundation.framework () as Double		    		    return CFAbsoluteTimeGetCurrent()		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Operator_Convert() As Date		  dim d as new Date		  dim ofs as Double = d.GMTOffset		  d.GMTOffset = 0		  d.TotalSeconds = me.AbsoluteTime + AbsoluteTimeIntervalSince1904		  d.GMTOffset = ofs		  return d		End Function	#tag EndMethod	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetMacOS			    static value as Double			    			    static initialized as Boolean = false			    if not initialized then			      initialized = true // if it doesn't work the first time, there's no need to try again, or is there?			      const kCFAbsoluteTimeIntervalSince1904 = "kCFAbsoluteTimeIntervalSince1904"			      dim p as Ptr = CFBundle.CarbonFramework.DataPointerNotRetained(kCFAbsoluteTimeIntervalSince1904)			      if p <> nil then			        value = p.Double(0)			      end if			    end if			    			    return value			  #endif			End Get		#tag EndGetter		Shared AbsoluteTimeIntervalSince1904 As Double	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetMacOS			    static value as Double			    			    static initialized as Boolean = false			    if not initialized then			      initialized = true // if it doesn't work the first time, there's no need to try again, or is there?			      const kCFAbsoluteTimeIntervalSince1970 = "AbsoluteTimeIntervalSince1970"			      dim p as Ptr = CFBundle.CarbonFramework.DataPointerNotRetained(kCFAbsoluteTimeIntervalSince1970)			      if p <> nil then			        value = p.Double(0)			      end if			    end if			    			    return value			  #endif			End Get		#tag EndGetter		Shared AbsoluteTimeIntervalSince1970 As Double	#tag EndComputedProperty	#tag ViewBehavior		#tag ViewProperty			Name="Description"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="CFType"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="CFType"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="CFType"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="CFType"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			InheritedFrom="CFType"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="CFType"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass