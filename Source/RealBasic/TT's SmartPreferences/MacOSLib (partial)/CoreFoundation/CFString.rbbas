#tag ClassClass CFStringInherits CFTypeImplements CFPropertyList	#tag Event		Function ClassID() As UInt32		  return me.ClassID		End Function	#tag EndEvent	#tag Event		Function VariantValue() As Variant		  return me.StringValue		End Function	#tag EndEvent	#tag Method, Flags = &h0		 Shared Function ClassID() As UInt32		  #if TargetMacOS		    declare function TypeID lib CoreFoundation.framework alias "CFStringGetTypeID" () as UInt32		    static id as UInt32 = TypeID		    return id		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function CompareWithOptions(stringToCompare as CFStringRef, options as integer = 0) As integer		  #if TargetMacOS		    declare function CFStringCompareWithOptions lib CoreFoundation.framework (string1 as Ptr, string2 as CFStringRef, range as CFRange, options as integer) as integer		    		    return CFStringCompareWithOptions( me.Reference, stringToCompare, CFRangeMake( 0, me.Length ), options )		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h1000		Sub Constructor(s as String)		  #if TargetMacOS		    declare function CFStringCreateWithCString lib CoreFoundation.framework (alloc as Ptr, cStr as CString, encoding as Integer) as Ptr		    		    if s.Encoding = nil then		      break		      s = s.DefineEncoding(Encodings.UTF8)		    end		    		    dim p as Ptr = CFStringCreateWithCString(nil, s, Encoding(s).code)		    		    self.Constructor(p, hasOwnership)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function CreateArrayWithFindResults(substring as CFStringRef, options as integer = 0, optional range as CFRange) As CFArray		  #if TargetMacOS		    declare function CFStringCreateArrayWithFindResults lib CoreFoundation.framework (alloc as Ptr, theString as Ptr, stringToFind as CFStringRef, range as CFRange, options as integer) as Ptr		    		    dim searchRange as CFRange		    		    if range.location = 0 and range.length = 0 then // Use full range if none specified		      searchRange = CFRangeMake( 0, me.Length )		    else		      searchRange = range		    end if		    		    dim result as Ptr = CFStringCreateArrayWithFindResults( nil, me.Reference, substring, searchRange, options )		    		    if result<>nil then		      return new CFArray( result, hasOwnership )		    end if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindWithOptions(substring as CFStringRef, options as integer = 0, optional range as CFRange) As CFRange		  #if TargetMacOS		    declare function CFStringFindWithOptions lib CoreFoundation.framework (theString as Ptr, stringToFind as CFStringRef, rangeToSearch as CFRange, searchOptions as integer, byref result as CFRange) as Boolean		    		    dim searchRange as CFRange		    if range.location = 0 and range.length = 0 then // Use full range if none specified		      searchRange = CFRangeMake( 0, me.Length )		    else		      searchRange = range		    end if		    		    dim result as CFRange		    dim found as Boolean = CFStringFindWithOptions( me.Reference, substring, searchRange, options, result )		    		    if found then		      return result		    else		      result.location = 0		      result.length = 0		      return result		    end if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Operator_Convert() As String		  return self.StringValue		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Operator_Convert(s as String)		  self.Constructor(s)		End Sub	#tag EndMethod	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetMacOS			    declare function CFStringGetLength lib CoreFoundation.framework (theString as Ptr) as integer			    			    return  CFStringGetLength( me.Reference )			  #endif			End Get		#tag EndGetter		Length As Integer	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetMacOS			    if self = nil then			      return ""			    end if			    			    declare function CFStringGetLength lib CoreFoundation.framework (theString as Ptr) as Integer			    declare function CFStringGetMaximumSizeForEncoding lib CoreFoundation.framework (length as Integer, enc as Integer) as Integer			    declare function CFStringGetCString lib CoreFoundation.framework (theString as Ptr, buffer as Ptr, bufferSize as Integer, enc as Integer) as Boolean			    			    dim stringLength as Integer = CFStringGetLength(self)			    if stringLength = 0 then			      return ""			    end if			    dim maxSize as Integer = CFStringGetMaximumSizeForEncoding(stringLength, kCFStringEncodingUTF8)			    if maxSize < 0 then			      return ""			    end if			    			    dim buffer as new MemoryBlock(1 + maxSize)			    if CFStringGetCString(self, buffer, buffer.Size, kCFStringEncodingUTF8) then			      return DefineEncoding(buffer.CString(0), Encodings.UTF8)			    else			      return ""			    end if			  #endif			End Get		#tag EndGetter		StringValue As String	#tag EndComputedProperty	#tag Constant, Name = kCFStringEncodingUTF8, Type = Double, Dynamic = False, Default = \"&h08000100", Scope = Private	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Description"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="CFType"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="CFType"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="CFType"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="CFType"		#tag EndViewProperty		#tag ViewProperty			Name="StringValue"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			InheritedFrom="CFType"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="CFType"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass