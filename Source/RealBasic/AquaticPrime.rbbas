#tag ClassClass AquaticPrime	#tag Method, Flags = &h0		Sub AddToBlacklist(newHash as String)		  mblacklist.Append newHash		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub Constructor()		  // use the other ones!		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(publicKey as MemoryBlock)		  // This takes the public key as a MemoryBlock containing the bytes		  		  dim s as String = EncodeHex(publicKey)		  me.Constructor ("0x"+s)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(publicKey as String, privateKey as String = "")		  // This takes the public key as a C Hex String, e.g. "0x123456ABCD...."		  		  #if TargetMacOS or TargetLinux		    Declare Sub ERR_load_crypto_strings Lib CryptoLib ()		    ERR_load_crypto_strings		  #endif		  		  self.SetKey publicKey, privateKey		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Destructor()		  #if TargetMacOS or TargetLinux		    Declare Sub ERR_free_strings Lib CryptoLib ()		    Declare Sub RSA_free Lib CryptoLib (r as Ptr)		    		    ERR_free_strings		    		    if rsaKey <> nil then		      RSA_free(rsaKey)		    end if		    		  #elseif TargetWin32		    Declare Function CryptReleaseContext Lib advapi (hProv As Integer, dwFlags As Integer) As Boolean		    Declare Function CryptDestroyKey Lib advapi (hKey as Integer) as Boolean		    		    if winKeyHdl <> 0 then		      call CryptDestroyKey (winKeyHdl)		      winKeyHdl = 0		    end if		    		    if winCtx <> 0 then		      call CryptReleaseContext (winCtx, 0)		      winCtx = 0		    end if		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function DictionaryForLicenseData(licenseData as String) As dictionary		  #pragma DisableBackgroundTasks // we don't want any interruptions here		  		  #if TargetMacOS or TargetLinux		    Declare Function RSA_public_decrypt Lib CryptoLib (flen as integer, from as Ptr, mto as Ptr, rsa as Ptr, padding as integer) As integer		    Declare Function ERR_error_string Lib CryptoLib (e as Integer, buf as Ptr) As CString		    Declare Function ERR_get_error Lib CryptoLib () as Integer		    Declare Function SHA1_Init Lib CryptoLib (c as Ptr) As integer		    Declare Function SHA1_Update Lib CryptoLib (c as Ptr, data as CString, mlen as integer) As integer		    Declare Function SHA1_Final Lib CryptoLib (md as Ptr, c as Ptr) As integer		  #endif		  		  dim x as new xmlDocument		  dim topDoc as xmlElement		  dim dict as xmlElement		  dim keyArray(-1) as String		  dim valueArray(-1) as String		  dim node as XMLNode		  dim n as integer		  dim sigBytes as MemoryBlock		  		  const kLicenseDataNotValidError = "Invalid license data"		  		  // Make sure public key is set up		  if TargetWin32 and winKeyHdl = 0 or not TargetWin32 and (rsaKey = nil or _uintValue(rsaKey, 4*_intSize) = 0) then		    _setError "RSA key is invalid"		    return nil		  end if		  		  // Traverse the XML structure and load key-value pairs in arrays		  try		    x.loadXml(licenseData)		    		    // Do some sanity checks on the XML		    if x.documentElement is nil or x.documentElement.childCount <> 1 then		      _setError kLicenseDataNotValidError		      return nil		    end if		    		    topDoc = x.documentElement		    if topDoc.LocalName <> "plist" or topDoc.firstChild is nil or not topDoc.firstChild isA XMLElement then		      _setError kLicenseDataNotValidError		      return nil		    end if		    		    dict = XMLElement(topDoc.firstChild)		    if dict.LocalName <> "dict" or dict.childCount = 0 then		      _setError kLicenseDataNotValidError		      return nil		    end if		    		    node = dict.firstChild		    		    while node isA XMLElement		      dim element as XMLElement = XMLElement(node)		      dim childCount as Integer = element.childCount		      dim firstChild as XMLNode = element.firstChild		      dim localName as String = element.LocalName		      		      if localName = "key" then		        if childCount = 1 and firstChild isA XMLTextNode then		          keyArray.append firstChild.value		        else		          // Error: invalid key		          _setError kLicenseDataNotValidError		          return nil		        end if		      elseif localName = "string" or localName = "data" then		        if childCount = 0 then		          // Empty value		          valueArray.append ""		        elseif childCount = 1 and firstChild isA XMLTextNode then		          valueArray.append firstChild.value		        else		          // Error: invalid value		          _setError kLicenseDataNotValidError		          return nil		        end		      else		        // It's neither a key nor a String/data value. This shouldn't be allowed, should it?		        _setError kLicenseDataNotValidError		        return nil		      end if		      node = element.nextSibling		    wend		    		    // Get the signature		    sigBytes = DecodeBase64(valueArray(keyArray.indexOf("Signature")))		    		    // Remove the Signature element from arrays		    dim elementNumber as integer= keyArray.indexOf("Signature")		    keyArray.remove elementNumber		    valueArray.remove elementNumber		    		    // Sort the keys because that's important for the SHA1 calculation		    //		    // Ideally, this should use the same ordering that the Cocoa and CF		    // sources use (i.e. "case insensitive", but it's not clear which chars		    // are considered for this case test - all letters of all encodings and		    // scripts, or only ASCII?)		    //		    keyArray.sortWith(valueArray)		    		  catch err as RuntimeException		    _setError kLicenseDataNotValidError		    return nil		  end try		  		  // Get the SHA1 hash digest from the license data and verify the signature with it		  dim digest as new MemoryBlock(SHA_DIGEST_LENGTH)		  #if TargetMacOS or TargetLinux		    		    // Calculate the digest		    dim ctx as new MemoryBlock(96)		    call SHA1_Init(ctx)		    for i as integer = 0 to valueArray.Ubound		      call SHA1_Update(ctx, valueArray(i), lenB(valueArray(i)))		    next		    call SHA1_Final(digest, ctx)		    		    // Get the signature's hash		    dim sigDigest as new MemoryBlock(SHA_DIGEST_LENGTH)		    if RSA_public_decrypt(sigBytes.Size, sigBytes, sigDigest, rsaKey, RSA_PKCS1_PADDING) <> SHA_DIGEST_LENGTH then		      _setError ERR_error_string(ERR_get_error(), nil)		      return nil		    end if		    		    // Check if the signature's hash is a match		    if StrComp (sigDigest, digest, 0) <> 0 then		      return nil		    end if		    		  #elseif TargetWin32		    // On Windows, I can't find a way to retrieve the hash from the signature. All I find is a verify function that takes a hash and checks		    // that against the signature. Therefore, we'll now calculate the hash of the license data and let the Windows function verify		    // it. If it's valid, it can be used for the blacklist check just as well.		    		    Declare Function CryptCreateHash Lib advapi (hProv As Integer, Algid As Integer, hKey As Integer, dwFlags As Integer, ByRef phHash As Integer) As Boolean		    Declare Function CryptHashData Lib advapi (hHash As Integer, pbData As CString, dwDataLen As Integer, dwFlags As Integer) As Boolean		    Declare Function CryptDestroyHash Lib advapi (hHash As Integer) As Boolean		    Declare Function CryptGetHashParam Lib advapi (hHash As Integer, type as Integer, data as Ptr, ByRef dlen as Integer, flags as Integer) As Boolean		    Declare Function GetLastError Lib kernel () As Integer		    Declare Function CryptVerifySignature Lib advapi Alias "CryptVerifySignatureA" (hHash As Integer, pbSignature As Ptr, dwSigLen As Integer, hPubKey As Integer, sDescription As Ptr, dwFlags As Integer) As Boolean		    Const HP_HASHVAL = 2		    Const CALG_SHA1 = &h00008004		    Const NTE_BAD_SIGNATURE = &h80090006		    		    dim hashHdl as Integer		    call CryptCreateHash (winCtx, CALG_SHA1, 0, 0, hashHdl)		    for i as integer = 0 to valueArray.Ubound		      call CryptHashData (hashHdl, valueArray(i), lenB(valueArray(i)), 0)		    next		    		    sigBytes = _reverseData(sigBytes)		    		    if not CryptVerifySignature (hashHdl, sigBytes, sigBytes.Size, winKeyHdl, nil, 0) then		      dim res as Integer = GetLastError()		      if res = NTE_BAD_SIGNATURE then		        _setError "Bad signature"		      else		        _setError _errorMsgFromCode (res)		      end		      call CryptDestroyHash (hashHdl)		      return nil		    end if		    		    dim dlen as Integer = digest.Size		    call CryptGetHashParam (hashHdl, HP_HASHVAL, digest, dlen, 0)		    call CryptDestroyHash (hashHdl)		    		  #endif		  		  // Get the textual represenation of the license hash and store it in case we need it later		  n = SHA_DIGEST_LENGTH-1		  dim hashCheck as String		  for hashIndex as integer = 0 to n		    hashCheck = hashCheck + lowercase(right("0"+hex(digest.byte(hashIndex)), 2))		  next		  mHash = hashCheck		  		  // Make sure the license hash isn't on the blacklist		  if mblacklist.indexOf(hash) >= 0 then		    return nil		  end if		  		  // Build a RB dictionary to return		  dim retDict as new dictionary		  for i as integer = 0 to keyArray.Ubound		    retDict.value(keyArray(i)) = valueArray(i)		  next		  		  return retDict		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function DictionaryForLicenseFile(licenseFile as folderItem) As dictionary		  // Read the XML file		  dim data as String		  		  if licenseFile = nil then		    return nil		  end if		  		  dim licenseStream as BinaryStream		  try		    licenseStream = BinaryStream.Open (licenseFile)		  catch exc as IOException		    '		  end try		  if licenseStream = nil then		    return nil		  end if		  		  data = licenseStream.Read (licenseStream.Length)		  licenseStream.Close		  		  return DictionaryForLicenseData(data)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function LicenseDataForDictionary(dict as dictionary) As String		  #if TargetMacOS or TargetLinux		    Declare Function SHA1 Lib CryptoLib (d as Ptr, n as Integer, md as Ptr) As Ptr		    Declare Function RSA_size Lib CryptoLib (RSA as Ptr) as Integer		    Declare Function RSA_private_encrypt Lib CryptoLib (flen as Integer, from as Ptr, mto as Ptr, rsa as Ptr, padding as integer) as integer		    Declare Function ERR_error_string Lib CryptoLib (e as Integer, buf as Ptr) As CString		    Declare Function ERR_get_error Lib CryptoLib () as Integer		  #else		    // Support for other platforms, i.e. Windows, hasn't been implemented yet		    raise new UnsupportedOperationException		  #endif		  		  // Make sure we have a good key		  if rsaKey = nil or _uintValue(rsaKey, 4*_intSize) = 0 or _uintValue(rsaKey, 6*_intSize) = 0 then		    _setError "RSA key is invalid"		    return ""		  end if		  		  // Grab all values from the dictionary		  dim keyArray(-1) as String		  dim dictData as new MemoryBlock(1)		  dim n as integer = dict.count-1		  for i as integer = 0 to n		    keyArray.append dict.key(i)		  next		  		  // Sort the keys so we always have a uniform order		  keyArray.Sort		  dim oldSize as integer = 0		  for i as integer = 0 to n		    dim curValue as String = dict.value(keyArray(i))		    dictData.size = oldSize+lenB(curValue)		    dictData.StringValue(oldSize, lenB(curValue)) = curValue		    oldSize = dictData.size		  next		  		  // Hash the data		  #if TargetMacOS or TargetLinux		    dim digest as new MemoryBlock(20)		    call SHA1(dictData, dictData.size, digest)		  #endif		  		  // Create the signature from 20 byte hash		  dim bytes as integer		  dim signature as MemoryBlock		  #if TargetMacOS or TargetLinux		    dim rsaLength as integer = RSA_size(rsaKey)		    signature = new MemoryBlock(rsaLength)		    bytes = RSA_private_encrypt(20, digest, signature, rsaKey, RSA_PKCS1_PADDING)		  #endif		  		  if bytes = -1 then		    #if TargetMacOS or TargetLinux		      _setError ERR_error_string(ERR_get_error(), nil)		    #endif		    return ""		  end if		  		  // Create plist data (XML document)		  dim x as new XMLDocument		  dim comment as XMLComment= x.createComment("DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd""")		  x.appendChild comment		  dim plist as XMLNode = x.appendChild(x.createElement("plist"))		  dim attr as XMLAttribute = x.createAttribute("version")		  attr.value = "1.0"		  plist.setAttributeNode(attr)		  dim dictXML as XMLNode = plist.appendChild(x.createElement("dict"))		  		  n = ubound(keyArray)		  for i as integer = 0 to n		    dim key as XMLNode = dictXML.appendChild(x.createElement("key"))		    key.appendChild x.createTextNode(keyArray(i))		    dim value as XMLNode = dictXML.appendChild(x.createElement("string"))		    value.appendChild x.createTextNode(dict.value(keyArray(i)))		  next		  		  dim key as XMLNode = dictXML.appendChild(x.createElement("key"))		  key.appendChild x.createTextNode("Signature")		  dim value as XMLNode = dictXML.appendChild(x.createElement("data"))		  value.appendChild x.createTextNode(ReplaceLineEndings(EncodeBase64(signature.stringValue(0, bytes), 68), endOfLine.UNIX))		  		  // Reformat XML for pretty printing		  dim XMLoutput as String = ReplaceAll(x.toString, "><", ">"+endOfLine.UNIX+"<")		  XMLoutput = Replace(Replace(XMLoutput, "<!--", "<!"), "-->", ">")		  XMLoutput = ReplaceAll(XMLoutput, "<key>", chr(9)+"<key>")		  XMLoutput = ReplaceAll(XMLoutput, "<string>", chr(9)+"<string>")		  XMLoutput = ReplaceAll(XMLoutput, "<data>", chr(9)+"<data>"+endOfLine.UNIX)		  XMLoutput = Replace(XMLoutput, "</data>", endOfLine.UNIX+chr(9)+"</data>")		  dim dataStart as integer = instr(XMLoutput, "<data>")+6		  dim dataEnd as integer = instr(XMLoutput, "="+endOfLine.UNIX)-2		  XMLoutput = left(XMLoutput, dataStart-1)_		  +replaceAll(mid(XMLoutput, dataStart, dataEnd-dataStart), endOfLine.UNIX, endOfLine.UNIX+chr(9))_		  +mid(XMLoutput, dataEnd)_		  +endOfLine.UNIX		  		  return XMLoutput		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SetBlacklist(hashArray() as String)		  dim u as Integer = hashArray.UBound		  redim mblacklist(u)		  		  for i as Integer = 0 to u		    mblacklist(i) = hashArray(i)		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetKey(key as String, privateKey as String = "")		  dim result as integer, ok as Boolean		  		  // Must have public modulus, private key is optional		  if key = "" then		    _setError "Empty public key parameter"		    return		  end if		  		  #if TargetMacOS or TargetLinux		    Declare Sub RSA_free Lib CryptoLib (r as Ptr)		    Declare Function RSA_new Lib CryptoLib () as Ptr		    Declare Function BN_dec2bn Lib CryptoLib (p as Ptr, str as CString) As integer		    Declare Function BN_hex2bn Lib CryptoLib (p as Ptr, str as CString) As integer		    Declare Function ERR_get_error Lib CryptoLib () as Integer		    Declare Function ERR_error_string Lib CryptoLib (e as Integer, buf as Ptr) As CString		    		    if rsaKey <> nil then		      RSA_free(rsaKey)		    end if		    rsaKey = RSA_new()		    		    // We are using the constant public exponent e = 3		    call BN_dec2bn(_ptrAdd(rsaKey,5*_intSize), "3")		    		    // Determine if we have hex or decimal values		    if left(key, 2) = "0x" then		      result = BN_hex2bn(_ptrAdd(rsaKey,4*_intSize), mid(key, 3))		    else		      result = BN_dec2bn(_ptrAdd(rsaKey,4*_intSize), key)		    end if		    		    if result = 0 then		      _setError ERR_error_string(ERR_get_error(), nil)		      return		    end if		    		    // Do the private portion if it exists		    if privateKey <> "" then		      if left(privateKey, 2) = "0x" then		        result = BN_hex2bn(_ptrAdd(rsaKey,6*_intSize), mid(privateKey, 3))		      else		        result = BN_dec2bn(_ptrAdd(rsaKey,6*_intSize), privateKey)		      end if		      		      if result = 0 then		        _setError ERR_error_string(ERR_get_error(), nil)		        return		      end if		    end if		    		  #elseif TargetWin32		    Declare Function CryptReleaseContext Lib advapi (hProv As Integer, dwFlags As Integer) As Boolean		    Declare Function CryptImportKey Lib advapi (hProv as Integer, data as Ptr, dlen as Integer, pbData as Ptr, flags as Integer, ByRef keyHandleOut As Integer) As Boolean		    Declare Function CryptDestroyKey Lib advapi (hKey as Integer) as Boolean		    Declare Function GetLastError Lib kernel () As Integer		    Const PROV_RSA_FULL = 1		    Const MS_DEF_PROV = "Microsoft Base Cryptographic Provider v1.0"		    Const MS_ENHANCED_PROV = "Microsoft Enhanced Cryptographic Provider v1.0"		    Const CRYPT_VERIFYCONTEXT = &hF0000000		    		    if privateKey <> "" then		      // we're not supporting this (yet), because it requires a different CryptAcquireContext call and also more code in the other functions		      _setError "Key generation not support on Windows"		      return		    end if		    		    if winKeyHdl <> 0 then		      call CryptDestroyKey (winKeyHdl)		      winKeyHdl = 0		    end if		    		    dim pubKeyData as MemoryBlock = _decodeHexDigits (key) // this is usually 128 bytes in length		    pubKeyData = _reverseData(pubKeyData)		    		    // set up data for CryptImportKey, see http://msdn.microsoft.com/en-us/library/aa387459(v=VS.85).aspx ("Public Key BLOBs")		    #if Target64Bit		      #pragma error "This has not been updated for 64 bit builds, so this is probably not going to work (you could try, though - maybe it works anyway)"		    #endif		    dim blob as new MemoryBlock (20+pubKeyData.Size) // a PUBLICKEYSTRUC, specifically a PUBLICKEYBLOB plus key data		    blob.UInt32Value(0) = &h00000206		    blob.UInt32Value(4) = &h0000A400		    blob.UInt32Value(8) = &h31415352 // 'RSA1'		    blob.UInt32Value(12) = pubKeyData.Size * 8		    blob.UInt32Value(16) = 3 // the public exponent		    blob.StringValue(20,pubKeyData.Size) = pubKeyData		    		    dim rsaContext as Integer = winCtx		    if rsaContext <> 0 then		      ok = true		    else		      #if false		        // This creates a new keyset as needed for for encryption:		        Declare Function CryptAcquireContext Lib advapi Alias "CryptAcquireContextA" (ByRef phProv As Integer, pszContainer As Ptr, pszProvider As CString, dwProvType As Integer, dwFlags As Integer) As Boolean		        ok = CryptAcquireContext (rsaContext, nil, MS_ENHANCED_PROV, PROV_RSA_FULL, 0)		        if not ok then		          result = GetLastError() // careful -- you won't get the right code here if you step here in the debugger, as the debugger clears this error code!		          if result = &h80090016 then // NTE_BAD_KEYSET		            ok = CryptAcquireContext (rsaContext, nil, MS_ENHANCED_PROV, PROV_RSA_FULL, 8) // create new one		          end if		        end		      #else		        // This creates a temporary keyset for verification only:		        Declare Function CryptAcquireContext Lib advapi Alias "CryptAcquireContextA" (ByRef phProv As Integer, pszContainer As Ptr, pszProvider As Ptr, dwProvType As Integer, dwFlags As Integer) As Boolean		        ok = CryptAcquireContext (rsaContext, nil, nil, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)		      #endif		    end if		    if not ok then		      _setError _errorMsgFromLastError		      break		    else		      winCtx = rsaContext		      dim keyHdl as Integer		      ok = CryptImportKey (rsaContext, blob, blob.Size, nil, 0, keyHdl)		      if not ok then		        _setError _errorMsgFromLastError		        break		      else		        winKeyHdl = keyHdl		      end		    end if		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function VerifyLicenseData(data as String) As Boolean		  return self.DictionaryForLicenseData(data) <> nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function VerifyLicenseFile(file as folderItem) As Boolean		  return self.DictionaryForLicenseFile(file) <> nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function WriteLicenseFileForDictionary(dict as dictionary, file as folderItem) As Boolean		  dim licenseFile as String = self.LicenseDataForDictionary(dict)		  		  if licenseFile = "" or file = nil then		    return false		  end if		  		  dim licenseStream as BinaryStream		  try		    licenseStream = BinaryStream.Create(file, true)		  catch exc as IOException		    '		  end try		  if licenseStream = nil then		    return false		  end if		  		  licenseStream.Write(licenseFile)		  licenseStream.Close		  		  return true		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function _decodeHexDigits(hexText as String) As MemoryBlock		  #if TargetWin32		    dim startOfs as Integer		    if hexText.Left(2) = "0x" then		      startOfs = 2		    end		    dim output as new MemoryBlock((hexText.Len-startOfs)\2)		    for i as Integer = 1 to hexText.Len-startOfs step 2		      dim s as String = hexText.Mid(i+startOfs,2)		      output.UInt8Value((i-1)\2) = Val("&h"+s)		    next		    return output		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function _errorMsgFromCode(code as Integer) As String		  #if TargetWin32		    // for error code meanings, see: http://msdn.microsoft.com/en-us/library/cc704587(PROT.10).aspx		    		    Declare Function FormatMessage Lib kernel Alias "FormatMessageA" (dwFlags As Integer, lpSource As Integer, dwMessageId As Integer, dwLanguageId As Integer, lpBuffer As Ptr, nSize As Integer, Arguments As Ptr) As Integer		    const FORMAT_MESSAGE_FROM_SYSTEM = &h00001000		    dim msg as new MemoryBlock(1024)		    dim n as Integer = FormatMessage (FORMAT_MESSAGE_FROM_SYSTEM, 0, code, 0, msg, msg.Size, nil)		    if n = n then		      return "ErrorCode="+Right("0000000"+Hex(code),8)		    end		    dim s as String = msg.StringValue(0,n)		    return s.DefineEncoding(Encodings.SystemDefault) // Not sure about the encoding here, though! Does someone know? Please fix and update in git!		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function _errorMsgFromLastError() As String		  #if TargetWin32		    Declare Function GetLastError Lib kernel () As Integer		    dim code as Integer = GetLastError()		    return _errorMsgFromCode (code)		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function _intSize() As Integer		  #if Target32Bit		    return 4		  #else		    return 8		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function _ptrAdd(m as MemoryBlock, add as Integer) As MemoryBlock		  dim mb as new MemoryBlock(8)		  mb.Ptr(0) = m		  #if Target32Bit		    mb.Int32Value(0) = mb.Int32Value(0) + add		  #else		    mb.Int64Value(0) = mb.Int64Value(0) + add		  #endif		  return mb.Ptr(0)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function _reverseData(mb as MemoryBlock) As MemoryBlock		  dim d2 as new MemoryBlock(mb.Size)		  for i as integer = 0 to mb.Size-1		    d2.Byte(mb.Size-1-i) = mb.Byte(i)		  next		  return d2		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub _setError(err as String)		  aqError = err		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function _uintValue(mb as MemoryBlock, ofs as Integer) As Integer		  #if Target32Bit		    return mb.UInt32Value(ofs)		  #else		    return mb.UInt64Value(ofs)		  #endif		End Function	#tag EndMethod	#tag Note, Name = Legal		AquaticPrime.rbp		AquaticPrime Xojo (REALbasic) Implementation				Windows code and 64 bit Xojo update by Thomas Tempelmann				Copyright 2010, Massimo Valle		All rights reserved.				derived and adapted from the original C/Objective-C impementation		Copyright 2005, Lucas Newman		All rights reserved.				Redistribution and use in source and binary forms, with or without modification,		are permitted provided that the following conditions are met:		- Redistributions of source code must retain the above copyright notice,		this list of conditions and the following disclaimer.		- Redistributions in binary form must reproduce the above copyright notice,		this list of conditions and the following disclaimer in the documentation and/or		other materials provided with the distribution.		- Neither the name of the Aquatic nor the names of its contributors may be used to		endorse or promote products derived from this software without specific prior written permission.				THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR		IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND		FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR		CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL		DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,		DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER		IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT		OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.	#tag EndNote	#tag Note, Name = Windows support		While the code should be complete for use with OSX and Linux,		the Windows code is currently only supporting verification		of a signed license, but not creating new ones.	#tag EndNote	#tag Property, Flags = &h21		Private aqError As String	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mHash			End Get		#tag EndGetter		Hash As String	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetMacOS or TargetLinux			    Declare Function BN_bn2hex Lib CryptoLib (p as Ptr) As CString			    			    if rsaKey = nil or _uintValue(rsaKey, 4*_intSize) = 0 then			      return ""			    end if			    			    return BN_bn2hex(_ptrAdd(rsaKey,4*_intSize))			  #endif			End Get		#tag EndGetter		Key As String	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return aqError			End Get		#tag EndGetter		LastError As String	#tag EndComputedProperty	#tag Property, Flags = &h21		Private mblacklist() As String	#tag EndProperty	#tag Property, Flags = &h21		Private mHash As String	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetMacOS or TargetLinux			    Declare Function BN_bn2hex Lib CryptoLib (p as Ptr) As CString			    			    if rsaKey = nil or _uintValue(rsaKey, 6*_intSize) = 0 then			      return ""			    end if			    			    return BN_bn2hex(_ptrAdd(rsaKey, 6*_intSize))			  #endif			End Get		#tag EndGetter		PrivateKey As String	#tag EndComputedProperty	#tag Property, Flags = &h21		Private rsaKey As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h21		Private winCtx As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private winKeyHdl As Integer	#tag EndProperty	#tag Constant, Name = advapi, Type = String, Dynamic = False, Default = \"advapi32.dll", Scope = Private	#tag EndConstant	#tag Constant, Name = CryptoLib, Type = String, Dynamic = False, Default = \"", Scope = Private		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"/usr/lib/libcrypto.dylib"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"libcrypto"	#tag EndConstant	#tag Constant, Name = kernel, Type = String, Dynamic = False, Default = \"kernel32.dll", Scope = Private	#tag EndConstant	#tag Constant, Name = RSA_PKCS1_PADDING, Type = Double, Dynamic = False, Default = \"1", Scope = Private	#tag EndConstant	#tag Constant, Name = SHA_DIGEST_LENGTH, Type = Double, Dynamic = False, Default = \"20", Scope = Private	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="hash"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Key"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="LastError"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="PrivateKey"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass